<template>
	<view class="container">
		<!-- 顶部导航 -->
		<view class="nav-header">
			<uni-icons type="arrow-left" size="24" color="#333" @click="goBack"></uni-icons>
			<text class="nav-title">美食下单</text>
			<view style="width: 24rpx"></view>
		</view>

		<!-- 美食信息卡片 -->
		<view class="food-card">
			<image class="food-image" :src=" orderData.imageUrl ||'/static/food/food' + orderData.foodId + '.jpg'" mode="aspectFill" />
			<view class="food-info">
				<text class="food-name">{{ orderData.foodName }}</text>
				<text class="restaurant-name">{{ orderData.restaurant }}</text>
				<view class="food-price">¥{{ orderData.price }}<text class="unit">/份</text></view>
			</view>
		</view>

		<!-- 下单表单 -->
		<view class="order-form">
			<view class="form-section">
				<text class="section-title">订单信息</text>
				
				<!-- 用餐时间 -->
				<view class="form-group">
					<text class="form-label">用餐时间</text>
					<picker 
						mode="time" 
						:value="orderData.diningTime" 
						@change="onDiningTimeChange"
					>
						<view class="form-input">
							<text>{{ orderData.diningTime }}</text>
							<uni-icons type="time" size="20" color="#999"></uni-icons>
						</view>
					</picker>
				</view>

				<!-- 用餐人数 -->
				<view class="form-group">
					<text class="form-label">用餐人数</text>
					<view class="guest-selector">
						<button 
							class="count-btn" 
							:disabled="orderData.guests <= 1"
							@click="changeGuestCount(-1)"
						>-</button>
						<text class="guest-count">{{ orderData.guests }} 人</text>
						<button 
							class="count-btn" 
							:disabled="orderData.guests >= 10"
							@click="changeGuestCount(1)"
						>+</button>
					</view>
				</view>

				<!-- 菜品数量 -->
				<view class="form-group">
					<text class="form-label">菜品数量</text>
					<view class="quantity-selector">
						<button 
							class="count-btn" 
							:disabled="orderData.quantity <= 1"
							@click="changeQuantity(-1)"
						>-</button>
						<text class="quantity-count">{{ orderData.quantity }} 份</text>
						<button 
							class="count-btn" 
							:disabled="orderData.quantity >= 10"
							@click="changeQuantity(1)"
						>+</button>
					</view>
				</view>

				<!-- 特殊要求 -->
				<view class="form-group">
					<text class="form-label">特殊要求</text>
					<textarea 
						class="special-request" 
						v-model="orderData.specialRequest" 
						placeholder="如：少辣、不要香菜等"
						maxlength="100"
					/>
				</view>

				<!-- 联系人信息 -->
				<view class="form-group">
					<text class="form-label">联系人</text>
					<input 
						class="form-input" 
						v-model="orderData.contactName" 
						placeholder="请输入联系人姓名"
					/>
				</view>

				<view class="form-group">
					<text class="form-label">手机号</text>
					<input 
						class="form-input" 
						v-model="orderData.contactPhone" 
						type="number" 
						placeholder="请输入手机号码"
						maxlength="11"
					/>
				</view>
			</view>

			<!-- 价格明细 -->
			<view class="form-section">
				<text class="section-title">价格明细</text>
				<view class="price-detail">
					<view class="price-item">
						<text>菜品 ({{ orderData.quantity }}份)</text>
						<text>¥{{ totalFoodPrice }}</text>
					</view>
					<view class="price-item">
						<text>服务费</text>
						<text>¥{{ serviceFee }}</text>
					</view>
					<view class="price-item total">
						<text>总计</text>
						<text class="total-price">¥{{ totalPrice }}</text>
					</view>
				</view>
			</view>

			<!-- 预订须知 -->
			<view class="form-section">
				<text class="section-title">预订须知</text>
				<view class="notice-list">
					<view class="notice-item">
						<uni-icons type="info" size="20" color="#4A90E2"></uni-icons>
						<text>请提前30分钟预订</text>
					</view>
					<view class="notice-item">
						<uni-icons type="info" size="20" color="#4A90E2"></uni-icons>
						<text>如需取消，请提前2小时联系</text>
					</view>
					<view class="notice-item">
						<uni-icons type="info" size="20" color="#4A90E2"></uni-icons>
						<text>到店后请出示预订信息</text>
					</view>
				</view>
			</view>
		</view>

		<!-- 底部操作栏 -->
		<view class="action-bar">
			<view class="price-summary">
				<text class="total-label">总计:</text>
				<text class="total-amount">¥{{ totalPrice }}</text>
			</view>
			<button class="confirm-btn" :disabled="!canSubmit" @click="handleSubmit">
				立即下单
			</button>
		</view>

		<!-- 支付弹窗 -->
		<uni-popup ref="paymentPopup" type="center">
			<view class="payment-popup">
				<text class="popup-title">选择支付方式</text>
				<view class="payment-options">
					<view class="payment-option" @click="selectPayment('wechat')">
						<uni-icons type="weixin" size="32" color="#07C160"></uni-icons>
						<text>微信支付</text>
						<uni-icons 
							type="checkmark" 
							size="20" 
							color="#4A90E2"
							v-if="selectedPayment === 'wechat'"
						></uni-icons>
					</view>
					<view class="payment-option" @click="selectPayment('alipay')">
						<uni-icons type="alipay" size="32" color="#1677FF"></uni-icons>
						<text>支付宝</text>
						<uni-icons 
							type="checkmark" 
							size="20" 
							color="#4A90E2"
							v-if="selectedPayment === 'alipay'"
						></uni-icons>
					</view>
				</view>
				<button class="pay-btn" @click="handlePayment">立即支付</button>
			</view>
		</uni-popup>
	</view>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { onLoad } from '@dcloudio/uni-app'

const orderData = ref({
	foodId: 1,
	foodName: '四川火锅',
	restaurant: '川味人家火锅店',
	price: 128,
	diningTime: '18:30',
	guests: 2,
	quantity: 1,
	specialRequest: '',
	contactName: '',
	contactPhone: ''
})

const selectedPayment = ref('wechat')
const serviceFee = ref(15)
const paymentPopup = ref()

const totalFoodPrice = computed(() => {
	return orderData.value.price * orderData.value.quantity
})

const totalPrice = computed(() => {
	return totalFoodPrice.value + serviceFee.value
})

const canSubmit = computed(() => {
	return (
		orderData.value.contactName &&
		orderData.value.contactPhone &&
		/^1[3-9]\d{9}$/.test(orderData.value.contactPhone)
	)
})

const goBack = () => {
	uni.navigateBack()
}

const onDiningTimeChange = (e) => {
	orderData.value.diningTime = e.detail.value
}

const changeGuestCount = (delta) => {
	const newCount = orderData.value.guests + delta
	if (newCount >= 1 && newCount <= 10) {
		orderData.value.guests = newCount
	}
}

const changeQuantity = (delta) => {
	const newQuantity = orderData.value.quantity + delta
	if (newQuantity >= 1 && newQuantity <= 10) {
		orderData.value.quantity = newQuantity
	}
}

const handleSubmit = () => {
	if (!canSubmit.value) return
	
	// 验证表单
	if (!validateForm()) return
	
	// 打开支付弹窗
	paymentPopup.value.open()
}

const validateForm = () => {
	if (!orderData.value.contactName) {
		uni.showToast({ title: '请输入联系人姓名', icon: 'none' })
		return false
	}
	
	if (!orderData.value.contactPhone) {
		uni.showToast({ title: '请输入手机号码', icon: 'none' })
		return false
	}
	
	if (!/^1[3-9]\d{9}$/.test(orderData.value.contactPhone)) {
		uni.showToast({ title: '手机号格式不正确', icon: 'none' })
		return false
	}
	
	return true
}

const selectPayment = (method) => {
	selectedPayment.value = method
}

const handlePayment = () => {
	// 模拟支付过程
	uni.showLoading({ title: '支付中...', mask: true })
	
	setTimeout(() => {
		uni.hideLoading()
		paymentPopup.value.close()
		
		// 支付成功
		uni.showToast({ title: '下单成功', icon: 'success' })
		
		// 跳转到订单详情
		setTimeout(() => {
			uni.redirectTo({ url: '/pages/order/order' })
		}, 1500)
	}, 2000)
}

onLoad((options) => {
	if (options.data) {
		// 从详情页传递的数据
		const passedData = JSON.parse(decodeURIComponent(options.data))
		
		// 更新订单数据
		orderData.value = {
			...orderData.value,
			foodId: passedData.foodId,
			foodName: passedData.foodName,
			price: passedData.price,
			restaurant: passedData.restaurant,
			quantity: passedData.quantity || 1,
			specialRequest: passedData.specialRequest || '',
			imageUrl: passedData.imageUrl || `/static/food/food${passedData.foodId || 1}.jpg`
		}
		
		// 调试输出，确认数据是否正确接收
		console.log('订单页接收到的数据:', passedData)
		console.log('更新后的订单数据:', orderData.value)
	}
})

onMounted(() => {
	// 设置默认用餐时间
	const now = new Date()
	const hours = now.getHours().toString().padStart(2, '0')
	const minutes = now.getMinutes().toString().padStart(2, '0')
	orderData.value.diningTime = `${hours}:${minutes}`
})
</script>

<style>
.container {
	padding-bottom: 120rpx;
	background: #f8f9fa;
}

.nav-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	flex-direction: row;
	padding: 30rpx;
	background: #fff;
	border-bottom: 1rpx solid #eee;
}

.nav-title {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
}

.food-card {
	background: #fff;
	margin: 20rpx;
	border-radius: 16rpx;
	padding: 24rpx;
	display: flex;
	gap: 20rpx;
}

.food-image {
	width: 160rpx;
	height: 120rpx;
	border-radius: 12rpx;
}

.food-info {
	flex: 1;
}

.food-name {
	font-size: 28rpx;
	font-weight: bold;
	color: #333;
	display: block;
	margin-bottom: 8rpx;
}

.restaurant-name {
	font-size: 24rpx;
	color: #666;
	display: block;
	margin-bottom: 12rpx;
}

.food-price {
	display: flex;
	align-items: center;
	gap: 10rpx;
	flex-direction: row;
	font-size: 28rpx;
	color: #FF6B00;
	font-weight: bold;
}

.unit {
	font-size: 22rpx;
	color: #999;
}

.order-form {
	margin: 20rpx;
}

.form-section {
	background: #fff;
	border-radius: 16rpx;
	padding: 30rpx;
	margin-bottom: 20rpx;
}

.section-title {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
	display: block;
	margin-bottom: 30rpx;
}

.form-group {
	display: flex;
	align-items: center;
	justify-content: space-between;
	flex-direction: row;
	margin-bottom: 30rpx;
}

.form-label {
	font-size: 28rpx;
	color: #333;
	min-width: 120rpx;
}

.form-input {
	flex: 1;
	background: #f8f9fa;
	border-radius: 12rpx;
	padding: 20rpx 24rpx;
	font-size: 28rpx;
	color: #333;
	display: flex;
	align-items: center;
	justify-content: space-between;
}

.guest-selector,
.quantity-selector {
	display: flex;
	align-items: center;
	flex-direction: row;
	gap: 20rpx;
}

.count-btn {
	width: 60rpx;
	height: 60rpx;
	border-radius: 50%;
	background: #4A90E2;
	color: #fff;
	font-size: 24rpx;
	font-weight: bold;
}

.count-btn:disabled {
	background: #ccc;
}

.guest-count,
.quantity-count {
	font-size: 28rpx;
	color: #333;
	min-width: 80rpx;
	text-align: center;
}

.special-request {
	flex: 1;
	background: #f8f9fa;
	border-radius: 12rpx;
	padding: 20rpx 24rpx;
	font-size: 28rpx;
	color: #333;
	height: 100rpx;
}

.price-detail {
	border-top: 1rpx solid #eee;
	padding-top: 20rpx;
}

.price-item {
	display: flex;
	justify-content: space-between;
	align-items: center;
	flex-direction: row;
	margin-bottom: 20rpx;
	font-size: 26rpx;
	color: #666;
}

.price-item.total {
	border-top: 1rpx solid #eee;
	padding-top: 20rpx;
	margin-top: 20rpx;
	font-weight: bold;
}

.total-price {
	font-size: 32rpx;
	color: #FF6B00;
}

.notice-list {
	margin-top: 16rpx;
}

.notice-item {
	display: flex;
	align-items: center;
	flex-direction: row;
	margin-bottom: 16rpx;
	font-size: 24rpx;
	color: #666;
}

.notice-item text {
	margin-left: 12rpx;
}

.action-bar {
	position: fixed;
	bottom: 0;
	left: 0;
	right: 0;
	background: #fff;
	padding: 20rpx 30rpx;
	border-top: 1rpx solid #eee;
	display: flex;
	align-items: center;
	justify-content: space-between;
	flex-direction: row;
}

.price-summary {
	display: flex;
	align-items: baseline;
	flex-direction: row;
}

.total-label {
	font-size: 28rpx;
	color: #666;
	margin-right: 12rpx;
}

.total-amount {
	font-size: 36rpx;
	color: #FF6B00;
	font-weight: bold;
}

.confirm-btn {
	background: #FF6B6B;
	color: #fff;
	border-radius: 40rpx;
	padding: 20rpx 40rpx;
	font-size: 28rpx;
	font-weight: bold;
}

.confirm-btn:disabled {
	background: #ccc;
}

.payment-popup {
	background: #fff;
	border-radius: 20rpx;
	padding: 40rpx;
}

.popup-title {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
	display: block;
	text-align: center;
	margin-bottom: 40rpx;
}

.payment-options {
	margin-bottom: 40rpx;
}

.payment-option {
	display: flex;
	align-items: center;
	justify-content: space-between;
	padding: 24rpx;
	border: 2rpx solid #eee;
	border-radius: 12rpx;
	margin-bottom: 20rpx;
}

.payment-option text {
	flex: 1;
	margin-left: 20rpx;
	font-size: 28rpx;
	color: #333;
}

.pay-btn {
	background: #4A90E2;
	color: #fff;
	border-radius: 12rpx;
	padding: 24rpx;
	font-size: 28rpx;
	font-weight: bold;
}
</style>